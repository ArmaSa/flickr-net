{"name":"Flickr-net","tagline":"Home of the FlickrNet API libary","body":"---\r\n---\r\n\r\n# Flickr-Net\r\n\r\nThe Flickr.Net API Library is a .Net Library for accessing the Flickr API. \r\nIt is written entirely in C#.\r\n\r\nThe library provides a simple one-to-one mapping to the methods of the Flickr REST API, \r\nhopefully hiding all of the complexity of calling the API, especially when it comes to authentication. \r\nCheck the Flickr API web site for the full list of commands, and then use the corresponding method in the Flickr library, \r\ne.g. to call flickr.photos.search use the Flickr.PhotosSearch method.\r\n\r\nThe library is not an attempt to provide an ORM layer over the Flickr API, \r\ne.g. if you retrieve a list of photosets for a user (i.e. by calling Flickr.PhotosetsGetList) \r\nthere is no direct property on each photoset to get the photos for that set, \r\nyou must go back to the Flickr object and call Flickr.PhotosetsGetPhotos passing in the photoset id.\r\n\r\n# Getting Started\r\n\r\nThe FlickrNet API library is available via NuGet.org. SImply run the following command:\r\n\r\n~~~\r\nInstall-Package FlickrNet\r\n~~~\r\n\r\n# Examples\r\n\r\nYou can create a new instance of the Flickr class, and set its properties, or you can use one of the parameterised constructors:\r\n\r\n~~~\r\nFlickr flickr = new Flickr();\r\nflickr.ApiKey = myApiKey;\r\n~~~\r\nor\r\n~~~\r\nFlickr flickr = new Flickr(myApiKey);\r\n~~~\r\n\r\nThe simplest method (although it has the most parameters) is probably the PhotosSearch method, \r\nwhich is best used by passing in a PhotoSearchOptions instance:\r\n\r\n~~~\r\nvar options = new PhotoSearchOptions { Tags = \"colorful\", PerPage = 20, Page = 1 };\r\nPhotoCollection photos = flickr.PhotosSearch(options);\r\n\r\nforeach(Photo photo in photos) \r\n{\r\n  Console.WriteLine(\"Photo {0} has title {1}\", photo.PhotoID, photo.Title);\r\n}\r\n~~~\r\n\r\n## Photo Extras\r\nOne of the hardest things to understand initially is that not all properties are returned by Flickr, you have to explicity request them.  \r\nFor example the following code would be used to return the Tags and the LargeUrl for a selection of photos:\r\n~~~\r\nvar options = new PhotoSearchOptions { \r\n  Tags = \"colorful\", \r\n  PerPage = 20, \r\n  Page = 1, \r\n  Extras = PhotoSearchExtras.LargeUrl | PhotoSearchExtras.Tags \r\n};\r\n\r\nPhotoCollection photos = flickr.PhotosSearch(options);\r\n// Each photos Tags and LargeUrl properties should now be set, \r\n// assuming that the photo has any tags, and is large enough to have a LargeUrl image available.\r\n~~~\r\n\r\n\r\n# Sample Applications\r\n\r\nI've started a separate CodePlex project to host sample applications: \r\n\r\nhttp://flickrnetsamples.codeplex.com/\r\n\r\n# License\r\n\r\nThe project is licensed under both the LGPL 2.1 license, and the Apache 2.0 license. \r\nThis gives you the flexibility to do pretty much anything you want with the code. Enjoy!\r\n\r\n# Contact\r\n\r\nYou can contact me at via the People tab or post a discussion here on codeplex if you require further help.\r\n\r\nSee my Flickr homepage at http://www.flickr.com/photos/samjudson\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}